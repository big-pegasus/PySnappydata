#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from snappydata.thrift import SnappyDataService
from snappydata.thrift.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  HostAddress getPreferredServer( serverTypes,  serverGroups,  failedServers)')
    print('   getAllServersWithPreferredServer( serverTypes,  serverGroups,  failedServers)')
    print('  ConnectionProperties openConnection(OpenConnectionArgs arguments)')
    print('  StatementResult execute(i64 connId, string sql,  outputParams, StatementAttrs attrs, string token)')
    print('  UpdateResult executeUpdate(i64 connId,  sqls, StatementAttrs attrs, string token)')
    print('  RowSet executeQuery(i64 connId, string sql, StatementAttrs attrs, string token)')
    print('  PrepareResult prepareStatement(i64 connId, string sql,  outputParams, StatementAttrs attrs, string token)')
    print('  StatementResult executePrepared(i64 stmtId, Row params,  outputParams, StatementAttrs attrs, string token)')
    print('  UpdateResult executePreparedUpdate(i64 stmtId, Row params, StatementAttrs attrs, string token)')
    print('  RowSet executePreparedQuery(i64 stmtId, Row params, StatementAttrs attrs, string token)')
    print('  UpdateResult executePreparedBatch(i64 stmtId,  paramsBatch, StatementAttrs attrs, string token)')
    print('  StatementResult prepareAndExecute(i64 connId, string sql,  paramsBatch,  outputParams, StatementAttrs attrs, string token)')
    print('  i8 beginTransaction(i64 connId, i8 isolationLevel,  flags, string token)')
    print('  void setTransactionAttributes(i64 connId,  flags, string token)')
    print('   getTransactionAttributes(i64 connId, string token)')
    print('  void commitTransaction(i64 connId, bool startNewTransaction,  flags, string token)')
    print('  void rollbackTransaction(i64 connId, bool startNewTransaction,  flags, string token)')
    print('  RowSet getNextResultSet(i64 cursorId, i8 otherResultSetBehaviour, string token)')
    print('  BlobChunk getBlobChunk(i64 connId, i64 lobId, i64 offset, i32 size, bool freeLobAtEnd, string token)')
    print('  ClobChunk getClobChunk(i64 connId, i64 lobId, i64 offset, i32 size, bool freeLobAtEnd, string token)')
    print('  i64 sendBlobChunk(BlobChunk chunk, i64 connId, string token)')
    print('  i64 sendClobChunk(ClobChunk chunk, i64 connId, string token)')
    print('  void freeLob(i64 connId, i64 lobId, string token)')
    print('  RowSet scrollCursor(i64 cursorId, i32 offset, bool offsetIsAbsolute, bool fetchReverse, i32 fetchSize, string token)')
    print('  void executeCursorUpdate(i64 cursorId,  operations,  changedRows,  changedColumnsList,  changedRowIndexes, string token)')
    print('  void startXATransaction(i64 connId, TransactionXid xid, i32 timeoutInSeconds, i32 flags, string token)')
    print('  i32 prepareXATransaction(i64 connId, TransactionXid xid, string token)')
    print('  void commitXATransaction(i64 connId, TransactionXid xid, bool onePhase, string token)')
    print('  void rollbackXATransaction(i64 connId, TransactionXid xid, string token)')
    print('  void forgetXATransaction(i64 connId, TransactionXid xid, string token)')
    print('  void endXATransaction(i64 connId, TransactionXid xid, i32 flags, string token)')
    print('   recoverXATransaction(i64 connId, i32 flag, string token)')
    print('  ServiceMetaData getServiceMetaData(i64 connId, string token)')
    print('  RowSet getSchemaMetaData(ServiceMetaDataCall schemaCall, ServiceMetaDataArgs metadataArgs)')
    print('  RowSet getIndexInfo(ServiceMetaDataArgs metadataArgs, bool unique, bool approximate)')
    print('  RowSet getUDTs(ServiceMetaDataArgs metadataArgs,  types)')
    print('  RowSet getBestRowIdentifier(ServiceMetaDataArgs metadataArgs, i32 scope, bool nullable)')
    print('   fetchActiveConnections(i64 connId, string token)')
    print('   fetchActiveStatements(i64 connId, string token)')
    print('  void cancelStatement(i64 stmtId, string token)')
    print('  void cancelCurrentStatement(i64 connId, string token)')
    print('  void closeResultSet(i64 cursorId, string token)')
    print('  void closeStatement(i64 stmtId, string token)')
    print('  void closeConnection(i64 connId, bool closeSocket, string token)')
    print('  void bulkClose( entities)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = SnappyDataService.Client(protocol)
transport.open()

if cmd == 'getPreferredServer':
    if len(args) != 3:
        print('getPreferredServer requires 3 args')
        sys.exit(1)
    pp.pprint(client.getPreferredServer(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'getAllServersWithPreferredServer':
    if len(args) != 3:
        print('getAllServersWithPreferredServer requires 3 args')
        sys.exit(1)
    pp.pprint(client.getAllServersWithPreferredServer(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'openConnection':
    if len(args) != 1:
        print('openConnection requires 1 args')
        sys.exit(1)
    pp.pprint(client.openConnection(eval(args[0]),))

elif cmd == 'execute':
    if len(args) != 5:
        print('execute requires 5 args')
        sys.exit(1)
    pp.pprint(client.execute(eval(args[0]), args[1], eval(args[2]), eval(args[3]), args[4],))

elif cmd == 'executeUpdate':
    if len(args) != 4:
        print('executeUpdate requires 4 args')
        sys.exit(1)
    pp.pprint(client.executeUpdate(eval(args[0]), eval(args[1]), eval(args[2]), args[3],))

elif cmd == 'executeQuery':
    if len(args) != 4:
        print('executeQuery requires 4 args')
        sys.exit(1)
    pp.pprint(client.executeQuery(eval(args[0]), args[1], eval(args[2]), args[3],))

elif cmd == 'prepareStatement':
    if len(args) != 5:
        print('prepareStatement requires 5 args')
        sys.exit(1)
    pp.pprint(client.prepareStatement(eval(args[0]), args[1], eval(args[2]), eval(args[3]), args[4],))

elif cmd == 'executePrepared':
    if len(args) != 5:
        print('executePrepared requires 5 args')
        sys.exit(1)
    pp.pprint(client.executePrepared(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), args[4],))

elif cmd == 'executePreparedUpdate':
    if len(args) != 4:
        print('executePreparedUpdate requires 4 args')
        sys.exit(1)
    pp.pprint(client.executePreparedUpdate(eval(args[0]), eval(args[1]), eval(args[2]), args[3],))

elif cmd == 'executePreparedQuery':
    if len(args) != 4:
        print('executePreparedQuery requires 4 args')
        sys.exit(1)
    pp.pprint(client.executePreparedQuery(eval(args[0]), eval(args[1]), eval(args[2]), args[3],))

elif cmd == 'executePreparedBatch':
    if len(args) != 4:
        print('executePreparedBatch requires 4 args')
        sys.exit(1)
    pp.pprint(client.executePreparedBatch(eval(args[0]), eval(args[1]), eval(args[2]), args[3],))

elif cmd == 'prepareAndExecute':
    if len(args) != 6:
        print('prepareAndExecute requires 6 args')
        sys.exit(1)
    pp.pprint(client.prepareAndExecute(eval(args[0]), args[1], eval(args[2]), eval(args[3]), eval(args[4]), args[5],))

elif cmd == 'beginTransaction':
    if len(args) != 4:
        print('beginTransaction requires 4 args')
        sys.exit(1)
    pp.pprint(client.beginTransaction(eval(args[0]), eval(args[1]), eval(args[2]), args[3],))

elif cmd == 'setTransactionAttributes':
    if len(args) != 3:
        print('setTransactionAttributes requires 3 args')
        sys.exit(1)
    pp.pprint(client.setTransactionAttributes(eval(args[0]), eval(args[1]), args[2],))

elif cmd == 'getTransactionAttributes':
    if len(args) != 2:
        print('getTransactionAttributes requires 2 args')
        sys.exit(1)
    pp.pprint(client.getTransactionAttributes(eval(args[0]), args[1],))

elif cmd == 'commitTransaction':
    if len(args) != 4:
        print('commitTransaction requires 4 args')
        sys.exit(1)
    pp.pprint(client.commitTransaction(eval(args[0]), eval(args[1]), eval(args[2]), args[3],))

elif cmd == 'rollbackTransaction':
    if len(args) != 4:
        print('rollbackTransaction requires 4 args')
        sys.exit(1)
    pp.pprint(client.rollbackTransaction(eval(args[0]), eval(args[1]), eval(args[2]), args[3],))

elif cmd == 'getNextResultSet':
    if len(args) != 3:
        print('getNextResultSet requires 3 args')
        sys.exit(1)
    pp.pprint(client.getNextResultSet(eval(args[0]), eval(args[1]), args[2],))

elif cmd == 'getBlobChunk':
    if len(args) != 6:
        print('getBlobChunk requires 6 args')
        sys.exit(1)
    pp.pprint(client.getBlobChunk(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), args[5],))

elif cmd == 'getClobChunk':
    if len(args) != 6:
        print('getClobChunk requires 6 args')
        sys.exit(1)
    pp.pprint(client.getClobChunk(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), args[5],))

elif cmd == 'sendBlobChunk':
    if len(args) != 3:
        print('sendBlobChunk requires 3 args')
        sys.exit(1)
    pp.pprint(client.sendBlobChunk(eval(args[0]), eval(args[1]), args[2],))

elif cmd == 'sendClobChunk':
    if len(args) != 3:
        print('sendClobChunk requires 3 args')
        sys.exit(1)
    pp.pprint(client.sendClobChunk(eval(args[0]), eval(args[1]), args[2],))

elif cmd == 'freeLob':
    if len(args) != 3:
        print('freeLob requires 3 args')
        sys.exit(1)
    pp.pprint(client.freeLob(eval(args[0]), eval(args[1]), args[2],))

elif cmd == 'scrollCursor':
    if len(args) != 6:
        print('scrollCursor requires 6 args')
        sys.exit(1)
    pp.pprint(client.scrollCursor(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), args[5],))

elif cmd == 'executeCursorUpdate':
    if len(args) != 6:
        print('executeCursorUpdate requires 6 args')
        sys.exit(1)
    pp.pprint(client.executeCursorUpdate(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), args[5],))

elif cmd == 'startXATransaction':
    if len(args) != 5:
        print('startXATransaction requires 5 args')
        sys.exit(1)
    pp.pprint(client.startXATransaction(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), args[4],))

elif cmd == 'prepareXATransaction':
    if len(args) != 3:
        print('prepareXATransaction requires 3 args')
        sys.exit(1)
    pp.pprint(client.prepareXATransaction(eval(args[0]), eval(args[1]), args[2],))

elif cmd == 'commitXATransaction':
    if len(args) != 4:
        print('commitXATransaction requires 4 args')
        sys.exit(1)
    pp.pprint(client.commitXATransaction(eval(args[0]), eval(args[1]), eval(args[2]), args[3],))

elif cmd == 'rollbackXATransaction':
    if len(args) != 3:
        print('rollbackXATransaction requires 3 args')
        sys.exit(1)
    pp.pprint(client.rollbackXATransaction(eval(args[0]), eval(args[1]), args[2],))

elif cmd == 'forgetXATransaction':
    if len(args) != 3:
        print('forgetXATransaction requires 3 args')
        sys.exit(1)
    pp.pprint(client.forgetXATransaction(eval(args[0]), eval(args[1]), args[2],))

elif cmd == 'endXATransaction':
    if len(args) != 4:
        print('endXATransaction requires 4 args')
        sys.exit(1)
    pp.pprint(client.endXATransaction(eval(args[0]), eval(args[1]), eval(args[2]), args[3],))

elif cmd == 'recoverXATransaction':
    if len(args) != 3:
        print('recoverXATransaction requires 3 args')
        sys.exit(1)
    pp.pprint(client.recoverXATransaction(eval(args[0]), eval(args[1]), args[2],))

elif cmd == 'getServiceMetaData':
    if len(args) != 2:
        print('getServiceMetaData requires 2 args')
        sys.exit(1)
    pp.pprint(client.getServiceMetaData(eval(args[0]), args[1],))

elif cmd == 'getSchemaMetaData':
    if len(args) != 2:
        print('getSchemaMetaData requires 2 args')
        sys.exit(1)
    pp.pprint(client.getSchemaMetaData(eval(args[0]), eval(args[1]),))

elif cmd == 'getIndexInfo':
    if len(args) != 3:
        print('getIndexInfo requires 3 args')
        sys.exit(1)
    pp.pprint(client.getIndexInfo(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'getUDTs':
    if len(args) != 2:
        print('getUDTs requires 2 args')
        sys.exit(1)
    pp.pprint(client.getUDTs(eval(args[0]), eval(args[1]),))

elif cmd == 'getBestRowIdentifier':
    if len(args) != 3:
        print('getBestRowIdentifier requires 3 args')
        sys.exit(1)
    pp.pprint(client.getBestRowIdentifier(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'fetchActiveConnections':
    if len(args) != 2:
        print('fetchActiveConnections requires 2 args')
        sys.exit(1)
    pp.pprint(client.fetchActiveConnections(eval(args[0]), args[1],))

elif cmd == 'fetchActiveStatements':
    if len(args) != 2:
        print('fetchActiveStatements requires 2 args')
        sys.exit(1)
    pp.pprint(client.fetchActiveStatements(eval(args[0]), args[1],))

elif cmd == 'cancelStatement':
    if len(args) != 2:
        print('cancelStatement requires 2 args')
        sys.exit(1)
    pp.pprint(client.cancelStatement(eval(args[0]), args[1],))

elif cmd == 'cancelCurrentStatement':
    if len(args) != 2:
        print('cancelCurrentStatement requires 2 args')
        sys.exit(1)
    pp.pprint(client.cancelCurrentStatement(eval(args[0]), args[1],))

elif cmd == 'closeResultSet':
    if len(args) != 2:
        print('closeResultSet requires 2 args')
        sys.exit(1)
    pp.pprint(client.closeResultSet(eval(args[0]), args[1],))

elif cmd == 'closeStatement':
    if len(args) != 2:
        print('closeStatement requires 2 args')
        sys.exit(1)
    pp.pprint(client.closeStatement(eval(args[0]), args[1],))

elif cmd == 'closeConnection':
    if len(args) != 3:
        print('closeConnection requires 3 args')
        sys.exit(1)
    pp.pprint(client.closeConnection(eval(args[0]), eval(args[1]), args[2],))

elif cmd == 'bulkClose':
    if len(args) != 1:
        print('bulkClose requires 1 args')
        sys.exit(1)
    pp.pprint(client.bulkClose(eval(args[0]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
